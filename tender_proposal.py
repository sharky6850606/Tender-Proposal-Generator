# -*- coding: utf-8 -*-
"""Tender Proposal

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z_ytE7lFlVqvsCK4kPDL4FnJToJI7QyS
"""

!pip install pandas numpy openai transformers torch

!pip install requests

!pip install python-docx

!pip install Streamlit

import os
import pandas as pd
import requests
import json
import tempfile
from docx import Document
import streamlit as st

# Load API key securely
API_KEY = st.secrets["GEMINI_API_KEY"]  # Store your API key in environment variables
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"

# Function to generate proposal
def generate_proposal(client_requirement):
    if not API_KEY:
        st.error("API key is missing. Please set the GEMINI_API_KEY environment variable.")
        return None

    payload = {
        "contents": [
            {"parts": [{"text": f"Write a professional tender proposal for: {client_requirement}"}]}
        ]
    }
    headers = {"Content-Type": "application/json"}
    params = {"key": API_KEY}

    response = requests.post(GEMINI_API_URL, headers=headers, params=params, json=payload)

    if response.status_code == 200:
        try:
            response_data = response.json()
            proposal_text = response_data.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text", "")
            return proposal_text if proposal_text else "Proposal generation failed. No text received."
        except (KeyError, IndexError, json.JSONDecodeError):
            st.error("Unexpected response format from the API.")
            return None
    else:
        st.error(f"Error: {response.status_code}, {response.text}")
        return None

# Function to save proposal to a Word document
def save_proposal_to_doc(client_requirement, proposal_text):
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
    doc = Document()
    doc.add_heading('Tender Proposal', level=1)
    doc.add_paragraph(f"Client Requirement: {client_requirement}")
    doc.add_paragraph("Proposal Text:")
    doc.add_paragraph(proposal_text)
    doc.save(temp_file.name)
    return temp_file.name

# Streamlit App
def main():
    st.title("Tender Proposal Generator")
    st.write("Enter the client's requirement below to generate a tender proposal.")

    # Input for client requirement
    client_requirement = st.text_area("Client Requirement", placeholder="Enter the client's requirement here...")

    if st.button("Generate Proposal"):
        if client_requirement.strip():
            with st.spinner("Generating proposal..."):
                proposal = generate_proposal(client_requirement)
                if proposal:
                    st.success("Proposal generated successfully!")
                    st.write("### Proposal Text:")
                    st.write(proposal)

                    # Save to Word document
                    filename = save_proposal_to_doc(client_requirement, proposal)
                    with open(filename, "rb") as file:
                        st.download_button(
                            label="Download Proposal as Word Document",
                            data=file,
                            file_name="Tender_Proposal.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
        else:
            st.warning("Please enter a client requirement.")

# Run the app
if __name__ == "__main__":
    main()